---
name: Master Workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master


jobs:


  setup-build:
    runs-on: ubuntu-latest

    steps:

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set env
        id: env_vars
        run: |
          REPO_NAME=${GITHUB_REPOSITORY#*/}
          # if branch is tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          fi

          echo "REPO_NAME:VERSION=${REPO_NAME}:${VERSION}"

          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_OUTPUT

      - name: Get env
        env:
          REPO_NAME: ${{ env.REPO_NAME }}
          VERSION: ${{ env.VERSION }}
        run: |
          echo "REPO_NAME:VERSION=${REPO_NAME}:${VERSION}"
          echo "REPO_NAME:VERSION=${{ env.REPO_NAME }}:${{ env.VERSION }}"

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build
        run: npm run build


    outputs:
      REPO_NAME: ${{ steps.env_vars.outputs.REPO_NAME }}
      VERSION: ${{ steps.env_vars.outputs.VERSION }}




  docker_build_push:

    runs-on: ubuntu-latest
    needs: [setup-build]
    env:
      REPO_NAME: ${{ needs.setup-build.outputs.REPO_NAME }}
      VERSION: ${{ needs.setup-build.outputs.VERSION }}
    outputs:
      IMAGE_TAG: ${{ steps.vars.outputs.IMAGE_TAG }}
      REPO_NAME: ${{ steps.vars.outputs.REPO_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3


      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}


      - name: Set image tag
        id: vars
        run: |
          # Check if the ref is a tag or a branch
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            IMAGE_TAG="${GITHUB_REF#refs/tags/}"
          else
            IMAGE_TAG="$(echo ${GITHUB_SHA} | cut -c1-7)"
          fi

          echo "IMAGE_TAG=${IMAGE_TAG}"  # Echo for logging
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

          REPO_NAME=${GITHUB_REPOSITORY#*/}
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV

          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT



      - name: Debug Environment Variables for docker push
        run: |
          echo "REPO_NAME=${{ env.REPO_NAME }}"
          echo "IMAGE_TAG=${{ env.IMAGE_TAG }}"
          echo "VERSION=${{ env.VERSION }}"

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:${{ env.IMAGE_TAG }}



# have to put the dokcer image in the environment variables to use it in helm_deploy job

  helm_deploy:

    runs-on: ubuntu-latest
    needs: [docker_build_push]

    env:
      REPO_NAME: ${{ needs.docker_build_push.outputs.REPO_NAME }}
      IMAGE_TAG: ${{ needs.docker_build_push.outputs.IMAGE_TAG }}


    steps:

      - name: Checkout
        uses: actions/checkout@v4


      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.13.3

      - name: Debug Environment Variables
        run: |
          echo "REPO_NAME=${{ env.REPO_NAME }}"
          echo "IMAGE_TAG=${{ env.IMAGE_TAG }}"


      - name: helm lint and template
        run: |
          helm lint helm
          helm template helm

      - name: helm_deploy
        run: |
          echo "helm upgrade --install $APP_NAME ./helm --set image.tag=$IMAGE_TAG"


