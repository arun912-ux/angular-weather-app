image: node:20

stages:
  - pre_setup
  - build
  - test
  - docker_build_push
  - helm_deploy

variables:
  APP_NAME: ""
  IMAGE_TAG: ""
  DOCKER_REGISTRY: "docker.io"


set_env_variables:
  stage: pre_setup
  script:
    - APP_NAME=$(node -p "require('./package.json').name")
    - APP_VERSION=$(node -p "require('./package.json').version")

    - echo "APP_NAME=$APP_NAME"
    - echo "APP_VERSION=$APP_VERSION"

    - echo "APP_NAME=$APP_NAME" >> variables.env
    - echo "APP_VERSION=$APP_VERSION" >> variables.env

  artifacts:
    reports:
      dotenv: variables.env

build:
  needs: [set_env_variables]
  stage: build
  script:
    - echo "APP_NAME:IMAGE_TAG=$APP_NAME:$IMAGE_TAG"

    - npm install --legacy-peer-deps
    - npm run build
  artifacts:
    paths:
      - dist/angular-weather-app


test:
  needs: [set_env_variables]
  stage: test
  script:
    - echo "APP_NAME:IMAGE_TAG=$APP_NAME:$IMAGE_TAG"

    - npm install --legacy-peer-deps
    - echo "npm run test"
    # - npm run test
  artifacts:
    reports:
      junit: unit-test-results.xml
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_TAG'  # Check if it's master or a tag
      allow_failure: false  # Allow this job to fail without failing the pipeline



docker_image_tag:
  needs: [build, set_env_variables]
  stage: docker_build_push
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "CI_ENVIRONMENT_FILE=$CI_ENVIRONMENT_FILE"  # Load environment variables
   # get the tag name or branch commit sha
    - |
      #! /bin/bash
      if [ -z "$CI_COMMIT_TAG" ]; then
        export IMAGE_TAG="$(echo ${CI_COMMIT_SHA} | cut -c1-7)"
      else
        export IMAGE_TAG=$CI_COMMIT_TAG
      fi

    - echo "IMAGE_TAG=$IMAGE_TAG"

    - echo "IMAGE_TAG=$IMAGE_TAG" >> variables.env
    - echo "APP_NAME=$APP_NAME" >> variables.env

    - echo "APP_NAME:IMAGE_TAG=$APP_NAME:$IMAGE_TAG"

  artifacts:
    reports:
      dotenv: variables.env



docker_build:
  needs: [build, docker_image_tag, set_env_variables]
  stage: docker_build_push
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "APP_NAME:IMAGE_TAG=$APP_NAME:$IMAGE_TAG"
    - docker build . -t $APP_NAME:$IMAGE_TAG


docker_push:
  needs: [docker_build, docker_image_tag, set_env_variables]
  stage: docker_build_push
  image: docker:latest
  services:
    - docker:dind
  # variables:
  #   DOCKER_HOST: tcp://docker:2375/
  #   DOCKER_TLS_CERTDIR: ""  # Disable TLS for Docker-in-Docker
  script:
    - echo "$DOCKER_REGISTRY/$APP_NAME:$IMAGE_TAG"
    # docker registry login
    - echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin $DOCKER_REGISTRY
    - docker tag $APP_NAME:$IMAGE_TAG $DOCKER_REGISTRY/$APP_NAME:$IMAGE_TAG
    # docker image full name with tag for pull
    - echo DOCKER_IMAGE_FULL_NAME=$DOCKER_REGISTRY/$APP_NAME:$IMAGE_TAG
    - echo DOCKER_IMAGE_FULL_NAME=$DOCKER_REGISTRY/$APP_NAME:$IMAGE_TAG >> variables.env
    # push
    - docker push $DOCKER_REGISTRY/$APP_NAME:$IMAGE_TAG

  artifacts:
    reports:
      dotenv: variables.env



helm_lint_template:
  stage: helm_deploy
  needs: [docker_push]
  image: alpine/helm:3.16
  script:
    - helm lint ./helm
    - helm template ./helm


helm_deploy:
  stage: helm_deploy
  needs: [docker_push, helm_lint_template, docker_image_tag, set_env_variables]
  image: alpine/helm:3.16
  script:
    - |
      echo "helm upgrade --install $APP_NAME ./helm --set image.tag=$IMAGE_TAG"


