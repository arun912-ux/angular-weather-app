image: node:20

stages:
  - pre_setup
  - build
  - test
  - docker_build_push
  - helm_kube_deploy

variables:
  DOCKERHUB_USERNAME: arun912
  APP_NAME: ""
  IMAGE_TAG: ""
  DOCKER_REGISTRY: "docker.io"


set_env_variables:
  stage: pre_setup
  script:
    - APP_NAME=$(node -p "require('./package.json').name")
    - APP_VERSION=$(node -p "require('./package.json').version")

    - echo "APP_NAME=$APP_NAME"
    - echo "APP_VERSION=$APP_VERSION"

    - echo "APP_NAME=$APP_NAME" >> variables.env
    - echo "APP_VERSION=$APP_VERSION" >> variables.env

  artifacts:
    reports:
      dotenv: variables.env

build:
  needs: [set_env_variables]
  stage: build
  script:
    - echo "APP_NAME:IMAGE_TAG=$APP_NAME:$IMAGE_TAG"

    - npm install --legacy-peer-deps
    - npm run build
  artifacts:
    paths:
      - dist/angular-weather-app


test:
  needs: [set_env_variables]
  stage: test
  script:
    - echo "APP_NAME:IMAGE_TAG=$APP_NAME:$IMAGE_TAG"

    - npm install --legacy-peer-deps
    - echo "npm run test"
    # - npm run test
  artifacts:
    reports:
      junit: unit-test-results.xml
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_TAG'  # Check if it's master or a tag
      allow_failure: false  # Allow this job to fail without failing the pipeline



docker_image_tag:
  needs: [build, set_env_variables]
  stage: docker_build_push
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "CI_ENVIRONMENT_FILE=$CI_ENVIRONMENT_FILE"  # Load environment variables
   # get the tag name or branch commit sha
    - |
      #! /bin/bash
      if [ -z "$CI_COMMIT_TAG" ]; then
        export IMAGE_TAG="$(echo ${CI_COMMIT_SHA} | cut -c1-7)"
      else
        export IMAGE_TAG=$CI_COMMIT_TAG
      fi

    - echo "IMAGE_TAG=$IMAGE_TAG"

    - echo "IMAGE_TAG=$IMAGE_TAG" >> variables.env
    - echo "APP_NAME=$APP_NAME" >> variables.env

    - echo "APP_NAME:IMAGE_TAG=$APP_NAME:$IMAGE_TAG"

  artifacts:
    reports:
      dotenv: variables.env



docker_image_build_push:
  needs: [build, docker_image_tag, set_env_variables]
  stage: docker_build_push
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - |
      #! /bin/bash
      echo "Login into $DOCKER_REGISTRY registry..."
      mkdir -p ~/.docker
      echo '{"auths":{"https://index.docker.io/v1/":{"auth":"'$DOCKERHUB_AUTH'"}}}' > ~/.docker/config.json
      docker login

  script:

    - echo "DOCKERHUB_USERNAME/APP_NAME:IMAGE_TAG=$DOCKERHUB_USERNAME/$APP_NAME:$IMAGE_TAG"
    - docker build . -t $DOCKERHUB_USERNAME/$APP_NAME:$IMAGE_TAG
    - echo "docker build is completed..!! $DOCKERHUB_USERNAME/$APP_NAME:$IMAGE_TAG"

    - docker images

    - echo "Pushing to docker registry..."
    - docker push $DOCKERHUB_USERNAME/$APP_NAME:$IMAGE_TAG
    - echo DOCKER_IMAGE_FULL_NAME=$DOCKERHUB_USERNAME/$APP_NAME:$IMAGE_TAG >> variables.env

  artifacts:
    reports:
      dotenv: variables.env



setup_tailscale:
  stage: helm_kube_deploy
  needs: [docker_image_build_push]
  image: tailscale/tailscale:stable
  before_script:
    - sleep 10
    # - systemctl --no-pager status tailscaled && systemctl start tailscaled
    - tailscaled
    - sleep 10
  script:
    - tailscale up  --authkey=$TAILSCALE_AUTH
    - |
      tailscale ip
      tailscale status
      ping 100.74.97.11 -c3 -W10



helm_lint_template:
  stage: helm_kube_deploy
  needs: [docker_image_build_push, docker_image_tag, set_env_variables]
  image: alpine/k8s:1.31.1
  script:
    - helm lint ./helm
    - helm template ./helm --set image.tag=$IMAGE_TAG


helm_deploy:
  stage: helm_kube_deploy
  needs: [docker_image_build_push, helm_lint_template, docker_image_tag, set_env_variables, setup_tailscale]
  image: alpine/k8s:1.31.1
  before_script: |
    #! /bin/bash
    mkdir -p ~/.kube && touch ~/.kube/config
    echo "${KUBE_CONFIG}" | base64 --decode > ~/.kube/config
    chmod 600 ~/.kube/config
    kubectl get all --all-namespaces
  script: |
      echo "helm upgrade --install $APP_NAME-$CI_COMMIT_REF_NAME ./helm --set image.tag=$IMAGE_TAG"
      helm upgrade --install "${APP_NAME}-${CI_COMMIT_REF_NAME}" ./helm --set image.tag=$IMAGE_TAG

